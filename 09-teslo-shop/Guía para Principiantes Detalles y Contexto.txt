1. Estructuracion de la pagina - Se van a crear todas las carpetas para construir la arquitectura de la aplicacion, como va a estar compuesta, colocar sus aspectos, servicios, componentes, rutas y utilidades.
2. Se tienen que establecer las rutas, crear el archivo .routes de cada componente o aspecto de la aplicacion, es decir, las rutas para el front, las rutas para el dashboard y al final las rutas para la aplicacion en general.
3. Crear componentes/definir rutas hijas
4. Despues de agregar las rutas, en el layout, colocas el html de las rutas con el router-outlet, y colocas un navbar arriba
5. Importamos las rutas al navbar y las definimos en los ancortag, en el navbar de daisy te viene tanto la parte responsive como la de desktop, tienes que configurar las dos.
6. Se cambia la fuente, creando una carpeta dentro de public/assets/fonts y ahi pones el archivo de la fuente que quieres poner
7. Se agregan las cards y se crea el componente
8. Agregar las animaciones del fadein mediante el archivo styles.css, este permite darle cierto degradado a los elementos que se les ponga esa animacion
9. Agregar los paths, para evitar escribir cosas como ./././auth, esto lo haces en el tsconfig.ts, dentro de compiler options
10. Levantar el backend(Se tiene que hacer lo que diga en el readme del backend)
-Abrir Docker desktop
-npm install
-clonar el .envtemplate y renombrarlo a .env
-docker-compose up -d (esto levantara el backend con docker)
-npm run start:dev (dentro del backend, es para levantar la aplicacion tambien)
-localhost:3000/api/seed (esto se pone en postman, con el fin de corroborar de que el back se haya levantado correctamente)
11.Vamos a hacer la peticion http para el listado de productos con la siguiente peticion: localhost:3000/api/products
12.Copiamos lo que arroje la respuesta http en postman y despues usamos el JSON as code, le ponemos el nombre ProductResponse y lo pegamos en las interfaces de la carpeta products, se crea antes un archivo dentro de esa carpeta de nombre "product.interface.ts"
13.Se corrigen los aspectos de las interfaces y sus cualidades pero eso es dependiendo de las necesidades del proyecto
14.Cortamos la interfaces del auth y lo copiamos en un nuevo directorio que se crea con la siguiente ruta. "src\app\auth\interfaces\user.interface.ts"
15. Agregar el provide httpclient con el width fetch adentro para que se puedan hacer peticiones a traves de Observables en Angular
16. Creamos el servicio para recibir los productos, dentro de la carpeta de services, se injecta el httpclient.
17. Hacemos el primer metodo del servicio para recibir los productos mediante una consulta http.get, recordar hacerlo mediante observables y utilizar el interface ProductsResponse
18. Injectamos el servicio en donde se va a mostrar, en este caso en la pagina de Home-Page, ahi quiero mostrar los productos
19. En el homepage, mediante rxresource establecemos un recurso reactivo, con el metodo que creamos en el servicio para obtener los productos y que estos se actualizen solitos siempre que haya un cambio.
20. Generar las variables de entorno y parametrizacion
-ng g environments : esto crea los archivos enviroments y enviroments de desarrollo
-se configuran las variables de entornos necesarias(esto varia para cada proyecto, pero por lo general podemos empezar con: "baseURL: 'https://localhost:3000/api',")
-crear una constante para el baseURL con el valor creado en enviroments(OJO, no usar enviroment de desarrollo)
-sustituirlo en la peticion http del servicio
-Parametrizamos la consulta con una interfaz dentro del servicio de productos(esto son los parametros hechos por el propio desarrollador del backen)
-Con la interfaz establecemos los parametros y lo implementamos en el metodo del servicio donde se reciben los productos, lo establecemos como argumento
-Dentro del metodo establecemos los valores por default que habran en dado caso de que no se establezcan(limit, offset, gender)
-Despues se establecen los argumentos recibidos en el metodo, dentro de la peticion http, va justo despues de la misma peticion
-Actualizamos los argumentos enviados en todos los sitios donde se usaba el metodo(home-page y podemos probar con un objeto vacio, esto para que se pongan los valores definidos por default {})
-Colocamos los argumentos de limit, offset,gender dentro de la peticion en home-page
21. Mostraremos los productos en el componente de product-card, tambien añadiremos las imagenes de los productos desde el backend
-importamos todo en el ts de productcard mediante un input.required(Esto hace que este componente afuerzas tenga un producto y asi evitaremos futuros errores)
-Ahora ya tenemos acceso a los aspectos del producto y toca cambiarlo en el html, cambiamos el titulo y descripcion mediante una señal
-Cambiamos el ancortag que te envia a ver mas acerca del producto, cambiamos el router link, le ponemos el product().slug para que tenga una url amigable
-Colocamos todos los productos en el home, mediante un for, utilizando el ProductsResource.Value()?.Products
-Tambien colocamos dentro de la referencia a nuestro productcard la variable que declaramos al inicio del for
-Cambiamos la fuente del titulo dentro del product card y utilizamos la fuente que declaramos al inicio(tambien cambia algunos aspectos pero solo de estetica del titulo)
22. Colocaremos el codigo para mostrar las imagenes de modo que prevengamos posibles errores en caso de que no haya una imagen en el producto a travez de un placeholder
-Creamos primero un pipe dentro de la carpeta de pipes en products, escribimos apipe y enter
-Cambiamos algunos nombres para personalizar el pipe
-Agregamos la imagen para el PlaceHolder dentro de la carpeta public/assets/images
23. Configuramos el pipe para mostrar el placeholder en los productos
-Configuramos las variables de entorno(Es decir, traemos el baseURL, con el enviroment normal, el que no es de desarrollo)
-El pipe se configura de modo que maneja todas las imagenes en strings, cada string representa una imagen
-Como el backend por producto maneja siempre un arreglo de dos imagenes, es decir dos strings(que contiene la ruta de la imagen)
-el pipe se configura de modo que siempre mostrara una imagen y en dado caso de que no haya una imagen mostrara el placeholder
24. Se cambia la imagen del product-card y se pone a travez de una señal el Product().images con el pipe que acabamos de crear
25. podemos probar el placeholder, colocando un arreglo vacio en lugar del product().images
26. Hacemos que puedas acceder a la pagina del producto desde el titulo y la propia imagen(solo copiamos el ancortag que ya hacia eso)
27. Configuramos el ProductPage de modo que cuando le demos click al producto nos envie a la informacion de ese producto
-Empezamos modificando el servicio, agregando un nuevo metodo para que nos rebote toda la informacion del producto basado en su idSlug
-Como el tipo de respuesta que queremos es diferente al del anterior metodo, se tiene que tomar la interfaz directamente de la api
-El dato sera entonces de tipo Product, y la peticion http sera la siguiente: `${baseURL}/products/${idSlug}`
-Ahora toca injectar el servicio en nuestro ProductPage
-Para acceder al valor del idSlug, lo haremos desde la ruta establecida en el servicio y eso lo haremos con el ActivatedRoute
-Por lo tanto injectaremos esto a nuestro product-page
-Con el activatedRoute injectado podemos acceder al idSlug y lo guardamos de la siguiente forma antes de acceder al servicio
-productIdSlug: string = this.ActivatedRoute.snapshot.params['idSlug'];
-Mediante un rxResource hacemos la peticion al servicio, poniendo el argumento en el request.
28. Se colocan los nombres del titulo y la descripcion al html de nuestro componente, buscando una bonita apariencia
-Comprobamos mediante un if, si el productresource(la funcion que hace el llamado http al servicio) esta cargando y le damos una animacion para eso con tailwind
-Comprobamos mediante un if si el productresource tiene un valor y mostramos tanto el titulo como la descripcion
-Se busca dar una apariencia bonita y bien distribuida mediante tailwind, puedes usar alguna card en daisyui
29. Agregar un Carousel a la pagina del producto
-Agregamos un nuevo componente dentro de la carpeta de componentes en nuestro directorio de Products
-Para agregar el carousel utilizaremos SwiperAPI, entonces comenzaremos primero con la instalacion
-npm install swiper
-Importamos las librerias necesarias del Swiper, proporcionadas directamente en la guia de instalacion
-Colocamos la referencia del componente nuevo dentro de nuestro html de la pagina del producto, donde deberia ir el carousel
-Colocamos la plantilla del carousel dentro del html de nuestro componente
-En el div que inicia todo el carousel, el div padre, le ponemos una referencia clave para poder trabajar con ella despues(#swiperDiv)
-Dentro del ts, establecemos una propiedad requerida, debemos asignarle forzosamente un arreglo de strings(Donde iran nuestras imagenes)
-Dentro de la referencia a nuestro componente en el product-page, cambiamos el codigo para asignarle las imagenes que acabamos de requerir, lo tomamos de nuestro productresource
-Inicializamos la instancia del SwiperDiv, a travez del Viewchild para buscar un elemento DOM, lo ponemos obligatorio y despues que sea de tipo ElementRef
-Implementamos el ciclo de vida del componente de modo AfterViewInit
-Establecemos el metodo del ngAfterViewInit
-Establecemos una constante de nombre element con el valor del SwiperDiv atravez del nativeElement
-Corroboramos que exista un valor en el element
-Colocamos el codigo proporcionado por la SwiperApi donde se inicializa el swiper.
-Se le otorga al element como argumento al swiper, en lugar del '.swiper'
-Tambien se le agregan los modulos despues del loop, se le agrega la navegacion y la paginacion importado desde swiper/modules
-Ahora dentro del html agregamos un @for para agregar todas las imagenes al carousel, lo tomamos de images() y ahi dentro colocamos el div
-Dentro del div se coloca la variable colocada en el @for y se le agrega el pipe que hicimos para el placeholder
-Se le agrega algunos estilos de tailwind para que tenga el object-cover y tenga el tamaño adecuado, tambien el alt="Producto"
30. Agregamos la pagina por genero
-Injectamos el servicio de los productos, tambien injectamos el ActivatedRoute
-Establecemos una señal de nombre gender, y se utiliza solamente params para adquirir los valores, despues con el metodo pipe nos permite usar la funcion map para extraer el valor de gender dentro de la URL
-Aqui solo copiamos y pegamos lo que habiamos puesto en nuestro homepage, tanto en la parte de ts como del html
-Modificamos el metodo de la peticion http para ajustarlo a la señal como argumento, y ajustamos los parametros de la peticion
-Dentro del html no se cambia casi nada, solo ponemos el genero dentro del h1 como un span
31. Creamos el modulo de shared para colocar la paginacion ahi
-colocamos el componente pagination dentro de la ruta de shared/components/pagination
-Modificamos el selector para personalizarlo
32. Agregamos el selector en el html del homepage(de momento podemos colocarlo al inicio para poder prestarle atencion sin necesidad de tener que hacer scroll)
33. Buscamos en daisyUI una pagination para agregarla en el html
-Le cambiamos algunos estilos de tailwind para ponerlo en el centro
34. Agregamos un par de atributos a nuestro componente de paginacion
-Agregamos un input donde estara el currentpage y le ponemos de valor por default de 1(dentro del parentesis)
-Agregamos otro input para establecer cuantas paginas son
-Establecemos una variable donde guardaremos la cantidad de paginas que hay y lo colocamos como un arreglo a travez de la funcion computed,array.from y usamos el callback para añadirle 1 y asi no empieze de 0 sino en 1
-Colocamos un @for que tome las paginas de la señal que hicimos para guardar el numero de paginas, getPagesList
-dentro del for colocamos los botones, ademas de los estilos de tailwind, le colocamos el siguiente codigo "[class.btn-primary]="page === currentPage()"", para poder resaltar la pagina actual
-En el boton le ponemos de nombre el valor numero que hay en {{page}}, es la misma variable que pusimos en el @for
-Vamos al homepage(donde pusimos el componente de la paginacion) y le colocamos a la referencia las paginas, las ponemos [pages] y usamos el productResource, recuerden que puede ser nulo y en dado caso de que sea asi, le ponemos un 0
34. Modificamos nuevamente el componente de paginacion.
-Importamos el RouterLink al archivo .ts
-En el archivo html, dentro del boton colocamos entre llaves la funcion de routerLink y le damos de valor un [], esto quiere decir que le estamos diciendo al programa que navege a la misma pagina en la que me encuentro
-Colocamos el router link porque forzosamente se tiene que poner para poder colocar los queryParams, estos sirven para agregar un valor a la URL, donde colocaremos la pagina a la cual navegar
-Se le da de valor a la pagina {page:page} = el primer valor es el nombre que se le va a agregar a la url: ?page, y el segundo valor es la cantidad que se le va a colocar, en este caso la variable page del @for donde estara el numero de pagina
-de modo que la url quedaria como http://localhost:4200/?page=2
-Se agrega una variable mas para poder manejar el current page, el current page al ser un input signal, este solo recibe datos de un componente padre, es decir, solo lee no se le puede agregar o modificar nada
-por lo tanto se tiene que crear otra variable en modo de señal y que se inicialize con el valor guardado en el currentpage, para de ese modo poder modificar su valor
-Entonces creamos una nueva funcion click en nuestro boton y mandamos a llamar la nueva señal que acabamos de crear, despues le agregamos con el .set el valor del page creado en el @for
-despues cambiamos tambien la variable que habiamos puesto antes que resaltaba el boton que este activo, antes se usaba el inputsignal(currentpage), solo lo actualizamos con la nueva señal que acabamos de agregar
-Dentro de la variable activePage, se cambia el signal() por un linkedSignal(), la explicacion del porque se hace esto es algo complejo asi que intentare explicartelo de la manera mas facil posible
-Como esta variable la inicializamos mediante un inputSignal, con signal, solo se sincroniza el valor una vez, cuando se inicializa con el currentPage, si de algun modo este inputsignal vuelve a cambiar desde el componente padre, nuestro signal no es capaz de cambiarlo y sincronizarlo
-Para ello existe linkedSignal, para evitar desincronizaciones con el componente padre, de este modo si se cambia el valor del CurrentPage de algun modo despues de inicializarlo, linkedSignal es capaz de sincronizarse nuevamente
-Dentro del homePage(Donde vamos a usar la paginacion), le asignamos un valor al currentPage
35. En el archivo ts injectamos el activatedRoute
36. Creamos una nueva señal de nombre CurrentPage que manejara y validara todo lo relacionado con la pagina actual
-Lo creamos con un toSignal y adentro vamos a construir todo lo necesario para las validaciones
-Accedemos al valor de la url mediante this.activatedRoute.queryParamMap, esto creara un observable que reaccionara a los valores de la URL
-Transformaremos los valores del observable mediante el .pipe y adentro estableceremos las acciones a realizar con los .map de rxjs
-Con el primer map agarramos el valor del observable(queryParamsMap) y lo transformamos para que no brote solo el valor del parametro page
-Ponemos un operador ternario para evaluar si regresa un valor o no, en dado caso de que regrese a travez de un +, convertimos ese valor(string) a un numero(es necesario colocar el ! para decirle a ts que si o si habra un valor ahi) y si no regresa un valor colocamos un 1 por default
-A su vez con otro map(al hacer otro map, este trabaja sobre el resultado del map anterior, no sobre el observable principal)
-En el segundo map establecemos una funcion que detecta si tiene un numero no valido: "isNaN" y a travez de un ? colocamos que si detecta que es un numero no valido ponga un 1 y si si es un numero valido, solo ponga el valor de page(resultado del primer map)
-Despues establecemos el valor inicial del toSignal a 1 con un {initialValue : 1}
37. Añadimos el valor del currentPage en la request de nuestro RxResource donde se hace la peticion http
-lo ponemos en el request de la siguiente forma ({ page: this.currentPage}) de ese modo ya tenemos el valor de la pagina actual dentro de nuestra peticion
-Ahora lo podemos usar en la peticion, a travez de la propiedad offset, podemos establecer la paginacion correctamente.
-Le ponemos de valor al offset, el valor obtenido de la request(request.page) multiplicado por la cantidad de objetos que queremos saltarnos, este valor debe ser el mismo puesto en la propiedad limit
-Tambien esto hara que siempre haya una pagina de mas valida y para evitar esto solo le restamos uno en la request, quedandonos asi ({page: this.currentPage() - 1}) y ya con eso lo solucionamos
38. Trasladamos toda nuestra logica puesta en el home-page para la paginacion en un servicio, dentro del componente de pagination(no creamos una nueva carpeta de servicios porque queremos amarrar toda la logica al componente de la paginacion)
-cremos un archivo llamado pagination.service.ts y con el atajo aservice, estructuramos nuestro servicio, despues cambiamos el nombre del selector a PaginationService, despues eliminamos el constructor y adentro del export class ponemos toda nuestra logica
-Tomamos la logica de la injeccion del activatedRoute y de la señal currentPage y lo pasamos a nuestro servicio, importamos todas las librerias
-Injectamos nuestro nuevo servicio al homepage(donde usaremos nuestra paginacion), tambien podemos eliminar todas las librerias que quedaron de la logica anterior que trasladamos para que se vea mas limpio el componente
-Solo sustituimos el valor de nuestra request en el RxResource, para que tome el valor del currentPage del servicio injectado previamente, de modo que quedaria asi: "this.paginationService.currentPage()"
-Tambien cambiamos esto en el html, donde usemos el currentPage()
-Ahora agregamos la paginacion en el GenderPage, usando el servicio de la misma manera que en el homepage(no explicare esto porque es puro copiar y pegar) Tambien decir que cambiamos la pocision de la paginacion a donde debe ir colocado, en el final de la pagina hasta abajo.
39. Colocaremos el cache de los productos
-
