1. Estructuracion de la pagina - Se van a crear todas las carpetas para construir la arquitectura de la aplicacion, como va a estar compuesta, colocar sus aspectos, servicios, componentes, rutas y utilidades.
2. Se tienen que establecer las rutas, crear el archivo .routes de cada componente o aspecto de la aplicacion, es decir, las rutas para el front, las rutas para el dashboard y al final las rutas para la aplicacion en general.
3. Crear componentes/definir rutas hijas
4. Despues de agregar las rutas, en el layout, colocas el html de las rutas con el router-outlet, y colocas un navbar arriba
5. Importamos las rutas al navbar y las definimos en los ancortag, en el navbar de daisy te viene tanto la parte responsive como la de desktop, tienes que configurar las dos.
6. Se cambia la fuente, creando una carpeta dentro de public/assets/fonts y ahi pones el archivo de la fuente que quieres poner
7. Se agregan las cards y se crea el componente
8. Agregar las animaciones del fadein mediante el archivo styles.css, este permite darle cierto degradado a los elementos que se les ponga esa animacion
9. Agregar los paths, para evitar escribir cosas como ./././auth, esto lo haces en el tsconfig.ts, dentro de compiler options
10. Levantar el backend(Se tiene que hacer lo que diga en el readme del backend)
-Abrir Docker desktop
-npm install
-clonar el .envtemplate y renombrarlo a .env
-docker-compose up -d (esto levantara el backend con docker)
-npm run start:dev (dentro del backend, es para levantar la aplicacion tambien)
-localhost:3000/api/seed (esto se pone en postman, con el fin de corroborar de que el back se haya levantado correctamente)
11.Vamos a hacer la peticion http para el listado de productos con la siguiente peticion: localhost:3000/api/products
12.Copiamos lo que arroje la respuesta http en postman y despues usamos el JSON as code, le ponemos el nombre ProductResponse y lo pegamos en las interfaces de la carpeta products, se crea antes un archivo dentro de esa carpeta de nombre "product.interface.ts"
13.Se corrigen los aspectos de las interfaces y sus cualidades pero eso es dependiendo de las necesidades del proyecto
14.Cortamos la interfaces del auth y lo copiamos en un nuevo directorio que se crea con la siguiente ruta. "src\app\auth\interfaces\user.interface.ts"
15. Agregar el provide httpclient con el width fetch adentro para que se puedan hacer peticiones a traves de Observables en Angular
16. Creamos el servicio para recibir los productos, dentro de la carpeta de services, se injecta el httpclient.
17. Hacemos el primer metodo del servicio para recibir los productos mediante una consulta http.get, recordar hacerlo mediante observables y utilizar el interface ProductsResponse
18. Injectamos el servicio en donde se va a mostrar, en este caso en la pagina de Home-Page, ahi quiero mostrar los productos
19. En el homepage, mediante rxresource establecemos un recurso reactivo, con el metodo que creamos en el servicio para obtener los productos y que estos se actualizen solitos siempre que haya un cambio.
20. Generar las variables de entorno y parametrizacion
-ng g environments : esto crea los archivos enviroments y enviroments de desarrollo
-se configuran las variables de entornos necesarias(esto varia para cada proyecto, pero por lo general podemos empezar con: "baseURL: 'https://localhost:3000/api',")
-crear una constante para el baseURL con el valor creado en enviroments(OJO, no usar enviroment de desarrollo)
-sustituirlo en la peticion http del servicio
-Parametrizamos la consulta con una interfaz dentro del servicio de productos(esto son los parametros hechos por el propio desarrollador del backen)
-Con la interfaz establecemos los parametros y lo implementamos en el metodo del servicio donde se reciben los productos, lo establecemos como argumento
-Dentro del metodo establecemos los valores por default que habran en dado caso de que no se establezcan(limit, offset, gender)
-Despues se establecen los argumentos recibidos en el metodo, dentro de la peticion http, va justo despues de la misma peticion
-Actualizamos los argumentos enviados en todos los sitios donde se usaba el metodo(home-page y podemos probar con un objeto vacio, esto para que se pongan los valores definidos por default {})
-Colocamos los argumentos de limit, offset,gender dentro de la peticion en home-page
21. Mostraremos los productos en el componente de product-card, tambien añadiremos las imagenes de los productos desde el backend
-importamos todo en el ts de productcard mediante un input.required(Esto hace que este componente afuerzas tenga un producto y asi evitaremos futuros errores)
-Ahora ya tenemos acceso a los aspectos del producto y toca cambiarlo en el html, cambiamos el titulo y descripcion mediante una señal
-Cambiamos el ancortag que te envia a ver mas acerca del producto, cambiamos el router link, le ponemos el product().slug para que tenga una url amigable
-Colocamos todos los productos en el home, mediante un for, utilizando el ProductsResource.Value()?.Products
-Tambien colocamos dentro de la referencia a nuestro productcard la variable que declaramos al inicio del for
-Cambiamos la fuente del titulo dentro del product card y utilizamos la fuente que declaramos al inicio(tambien cambia algunos aspectos pero solo de estetica del titulo)
22. Colocaremos el codigo para mostrar las imagenes de modo que prevengamos posibles errores en caso de que no haya una imagen en el producto a travez de un placeholder
-Creamos primero un pipe dentro de la carpeta de pipes en products, escribimos apipe y enter
-Cambiamos algunos nombres para personalizar el pipe
-Agregamos la imagen para el PlaceHolder dentro de la carpeta public/assets/images
23. Configuramos el pipe para mostrar el placeholder en los productos
-Configuramos las variables de entorno(Es decir, traemos el baseURL, con el enviroment normal, el que no es de desarrollo)
-El pipe se configura de modo que maneja todas las imagenes en strings, cada string representa una imagen
-Como el backend por producto maneja siempre un arreglo de dos imagenes, es decir dos strings(que contiene la ruta de la imagen)
-el pipe se configura de modo que siempre mostrara una imagen y en dado caso de que no haya una imagen mostrara el placeholder
24. Se cambia la imagen del product-card y se pone a travez de una señal el Product().images con el pipe que acabamos de crear
25. podemos probar el placeholder, colocando un arreglo vacio en lugar del product().images
